using Application.Commands;
using Application.DTOs;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using Domain.Entities;
using Infrastructure.Database;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Application.Services
{
    public class PentestsService : IPentestsService
    {
        private readonly PentestManagerContext _context;

        public PentestsService(PentestManagerContext context)
        {
            _context = context;
        }

        public async Task AddReport(AddReportCommand command)
        {
            var report = new PentestReport(
                command.SystemName,
                command.TestDate,
                command.TestEndDate,
                command.RetestDate,
                command.RetestEndDate,
                command.TestLocalization,
                command.ReportVersion,
                command.TestsSpecification,
                command.TestsConclusions,
                command.TestsVulnerabilities,
                command.TechnicalSummary,
                command.RecommendedChanges,
                command.Vulnerabilities.Select(x => new Vulnerability(x.Name, x.Description, x.Permissions, x.FixRecommendation, x.StatusAfterRetests, x.IsFixed, x.VulnerabilityLevel)).ToList(),
                command.Auditors.Select(x => new Auditor(x.Name, x.Surname)).ToList());

            await _context.PentestReports.AddAsync(report);

            await _context.SaveChangesAsync();
        }

        public async Task<FileStream> GetDocx(long id)
        {
            var report = await _context.PentestReports.Include(x => x.Vulnerabilities).Include(x => x.Auditors).SingleOrDefaultAsync(r => r.Id == id);

            string fileName = Path.Combine(Directory.GetCurrentDirectory(), "pentest_report_template.docx");
            var outputPath = Path.Combine(Directory.GetCurrentDirectory(), "pentest_report_" + DateTime.Now.Ticks + ".docx");

            File.Copy(fileName, outputPath, overwrite: true);

            using (WordprocessingDocument myDocument = WordprocessingDocument.Open(outputPath, true))
            {
                var allMergeFields = myDocument.MainDocumentPart.RootElement.Descendants<FieldCode>().ToList();
                var docData = report.GetKeyValuePairs();
                foreach (var field in allMergeFields)
                {
                    field.ReplaceWithText(docData[field.Text]);
                }

                Table vunerabilitiesTable = Helpers.CreateVulnerabilitesTable();
                Helpers.AddTitleRow(vunerabilitiesTable);
                int i = 1;
                foreach (var vulnerability in report.Vulnerabilities)
                {
                    Helpers.AddVulnerabilityToTable(vunerabilitiesTable, vulnerability, i);
                    i++;
                }
                myDocument.MainDocumentPart.Document.Body.Append(vunerabilitiesTable);

                Paragraph p = new Paragraph(new Run(new Text("               ")));
                myDocument.MainDocumentPart.Document.Body.AppendChild(p);
                myDocument.MainDocumentPart.Document.Body.AppendChild(p);
                p =new Paragraph(new Run(new Text("Szczegóły podatności")));
                myDocument.MainDocumentPart.Document.Body.AppendChild(p);

                i = 1;
                foreach (var vulnerability in report.Vulnerabilities)
                {
                    AddVulnerabilityDetailsTable(myDocument, vulnerability, i);
                    i++;
                    p = new Paragraph(new Run(new Text("               ")));
                    myDocument.MainDocumentPart.Document.Body.AppendChild(p);
                }

                myDocument.MainDocumentPart.Document.Save();
            }
            var stream = new FileStream(outputPath, FileMode.Open, FileAccess.Read);

            return stream;
        }

        public async Task<List<ReportDTO>> GetReports()
        {
            var result = await _context.PentestReports.Include(x => x.Vulnerabilities).Include(x => x.Auditors).ToListAsync();

            return result.Select(x => new ReportDTO()
            {
                Id = x.Id,
                ReportVersion = x.ReportVersion,
                SystemName = x.SystemName,
                TestDate = x.TestDate,
                TestEndDate = x.TestEndDate,
                RetestDate = x.RetestDate,
                RetestEndDate = x.RetestEndDate,
                TestLocalization=x.TestLocalization,
                RecommendedChanges = x.RecommendedChanges,
                TechnicalSummary = x.TechnicalSummary,
                TestsConclusions = x.TestsConclusions,
                TestsSpecification = x.TestsSpecification,
                TestsVulnerabilities = x.TestsVulnerabilities,
                Vulnerabilities = x.Vulnerabilities.Select(v => new VulnerabilityDTO()
                {
                    Id = v.Id,
                    Description = v.Description,
                    FixRecommendation = v.FixRecommendation,
                    IsFixed=v.IsFixed,
                    Name=v.Name,
                    StatusAfterRetests=v.StatusAfterRetests,
                    Permissions=v.Permissions,
                    VulnerabilityLevel=v.VulnerabilityLevel
                }).ToList(),
                Auditors = x.Auditors.Select(a => new AuditorDTO()
                {
                    Id = a.Id,
                    Name = a.Name,
                    Surname = a.Surname
                }).ToList()
            }).ToList();
        }

        private void AddVulnerabilityDetailsTable(WordprocessingDocument document, Vulnerability vulnerability, int index)
        {
            Table table = Helpers.CreateVulnerabilitesTable();
            Helpers.AddTitleRowToVulnerabilityDetailsTable(table, vulnerability, index);
            Helpers.AddSectionToVulnerabilityDetailsTable(table, "Opis", vulnerability.Description);
            Helpers.AddSectionToVulnerabilityDetailsTable(table, "Poziom niebezpieczeństwa", Helpers.ResolveVulnerabilityLevelName(vulnerability.VulnerabilityLevel));
            Helpers.AddSectionToVulnerabilityDetailsTable(table, "Rekomendacja naprawy", vulnerability.FixRecommendation);
            Helpers.AddSectionToVulnerabilityDetailsTable(table, "Status po retestach", vulnerability.StatusAfterRetests);

            document.MainDocumentPart.Document.Body.Append(table);
        }
    }

    public static class Helpers
    {
        public static void ReplaceWithText(this FieldCode field, string replacementText)
        {
            if (field == null)
                return;
            Run rFldCode = field.Parent as Run;
            Run rBegin = rFldCode.PreviousSibling<Run>();
            Run rSep = rFldCode.NextSibling<Run>();
            Run rText = rSep.NextSibling<Run>();
            field.Text = replacementText;
            rBegin.Remove();
            rSep.Remove();
        }
        public static Table CreateVulnerabilitesTable()
        {
            Table table = new Table();

            // Create a TableProperties object and specify its border information.
            TableProperties tblProp = new TableProperties(
                new TableBorders(
                    new TopBorder()
                    {
                        Val =
                        new EnumValue<BorderValues>(BorderValues.Single),
                        Size = 5
                    },
                    new BottomBorder()
                    {
                        Val =
                        new EnumValue<BorderValues>(BorderValues.Single),
                        Size = 5
                    },
                    new LeftBorder()
                    {
                        Val =
                        new EnumValue<BorderValues>(BorderValues.Single),
                        Size = 5
                    },
                    new RightBorder()
                    {
                        Val =
                        new EnumValue<BorderValues>(BorderValues.Single),
                        Size = 5
                    },
                    new InsideHorizontalBorder()
                    {
                        Val =
                        new EnumValue<BorderValues>(BorderValues.Single),
                        Size = 5
                    },
                    new InsideVerticalBorder()
                    {
                        Val =
                        new EnumValue<BorderValues>(BorderValues.Single),
                        Size = 5
                    }
                )
            );

            // Append the TableProperties object to the empty table.
            table.AppendChild<TableProperties>(tblProp);

            return table;
        }
        public static void AddTitleRow(Table table)
        {
            TableRow tittleRow = new TableRow();
            TableCell tc1 = new TableCell();
            tc1.Append(new TableCellProperties(
                new TableCellWidth() { Type = TableWidthUnitValues.Dxa, Width = "2400" }));
            tc1.Append(new Paragraph(new Run(new Text("Index"))));
            tittleRow.Append(tc1);

            TableCell tc2 = new TableCell();
            tc2.Append(new TableCellProperties(
               new TableCellWidth() { Type = TableWidthUnitValues.Dxa, Width = "2400" }));
            tc2.Append(new Paragraph(new Run(new Text("Opis"))));
            tittleRow.Append(tc2);

            TableCell tc4 = new TableCell();
            tc4.Append(new TableCellProperties(
               new TableCellWidth() { Type = TableWidthUnitValues.Dxa, Width = "2400" }));
            tc4.Append(new Paragraph(new Run(new Text("Status"))));
            tittleRow.Append(tc4);
            table.Append(tittleRow);
        }
        public static void AddVulnerabilityToTable(Table table, Vulnerability vulnerability, int index)
        {
            TableRow row = new TableRow();

            TableCell tc1 = new TableCell();
            tc1.Append(new TableCellProperties(
                new TableCellWidth() { Type = TableWidthUnitValues.Dxa, Width = "2400" }));

            var fillColor = ResolveRowColor(vulnerability.VulnerabilityLevel);

            tc1.TableCellProperties.Shading = new Shading()
            {
                Color = "auto",
                Fill = fillColor,
                Val = ShadingPatternValues.Clear
            };
            tc1.Append(new Paragraph(new Run(new Text(index.ToString()))));
            row.Append(tc1);

            TableCell tc2 = new TableCell();
            tc2.Append(new TableCellProperties(
                new TableCellWidth() { Type = TableWidthUnitValues.Dxa, Width = "2400" }));
            tc2.Append(new Paragraph(new Run(new Text(vulnerability.Description))));
            row.Append(tc2);

            TableCell tc4 = new TableCell();
            tc4.Append(new TableCellProperties(
                new TableCellWidth() { Type = TableWidthUnitValues.Dxa, Width = "2400" }));
            tc4.Append(new Paragraph(new Run(new Text(vulnerability.IsFixed ? "Wyeliminowano" : "Do wyeliminowania"))));
            row.Append(tc4);

            table.Append(row);
        }
        public static void AddTitleRowToVulnerabilityDetailsTable(Table table, Vulnerability vulnerability, int index)
        {
            TableRow tittleRow = new TableRow();
            TableCell tc1 = new TableCell();
            tc1.Append(new TableCellProperties(
                new TableCellWidth() { Type = TableWidthUnitValues.Dxa, Width = "100" }));

            var fillColor = ResolveRowColor(vulnerability.VulnerabilityLevel);
            tc1.TableCellProperties.Shading = new Shading()
            {
                Color = "auto",
                Fill = fillColor,
                Val = ShadingPatternValues.Clear
            };

            tc1.Append(new Paragraph(new Run(new Text("Numer porządkowy"))));
            tittleRow.Append(tc1);

            TableCell tc2 = new TableCell();
            tc2.Append(new TableCellProperties(
               new TableCellWidth() { Type = TableWidthUnitValues.Dxa, Width = "200" }));

            tc2.TableCellProperties.Shading = new Shading()
            {
                Color = "auto",
                Fill = fillColor,
                Val = ShadingPatternValues.Clear
            };

            tc2.Append(new Paragraph(new Run(new Text(index.ToString() + ". " + vulnerability.Name))));
            tittleRow.Append(tc2);
            
            table.Append(tittleRow);
        }
        public static void AddSectionToVulnerabilityDetailsTable(Table table, string title, string desc)
        {
            TableRow tittleRow = new TableRow();
            TableCell tc1 = new TableCell();
            tc1.Append(new TableCellProperties(
                new TableCellWidth() { Type = TableWidthUnitValues.Dxa, Width = "100" }));
            tc1.Append(new Paragraph(new Run(new Text(title))));
            tittleRow.Append(tc1);

            TableCell tc2 = new TableCell();
            tc2.Append(new TableCellProperties(
               new TableCellWidth() { Type = TableWidthUnitValues.Dxa, Width = "200" }));
            tc2.Append(new Paragraph(new Run(new Text(desc))));
            tittleRow.Append(tc2);

            table.Append(tittleRow);
        }

        private static string ResolveRowColor(int vulnerabilityLevel)
        {
            switch (vulnerabilityLevel)
            {
                case 1:
                    return "ffffff";
                case 2:
                    return "fffbbc";
                case 3:
                    return "ffcea2";
                case 4:
                    return "ffb7b7";
                default:
                    return "ffffff";
            }
        }

        public static string ResolveVulnerabilityLevelName(int vulnerabilityLevel)
        {
            switch (vulnerabilityLevel)
            {
                case 1:
                    return "Ogólne zalecenie";
                case 2:
                    return "Niski";
                case 3:
                    return "Średni";
                case 4:
                    return "Wysoki";
                default:
                    return "";
            }
        }
    }
}
