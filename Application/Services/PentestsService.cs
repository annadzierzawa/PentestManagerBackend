using Application.Commands;
using Application.DTOs;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using Domain.Entities;
using Infrastructure.Database;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Application.Services
{
    public class PentestsService : IPentestsService
    {
        private readonly PentestManagerContext _context;

        public PentestsService(PentestManagerContext context)
        {
            _context = context;
        }

        public async Task AddReport(AddReportCommand command)
        {
            var report = new PentestReport(
                command.SystemName,
                command.TestDate,
                command.Testers,
                command.ReportVersion,
                command.TestsSpecification,
                command.TestsConclusions,
                command.TestsVulnerabilities,
                command.TechnicalSummary,
                command.RecommendedChanges,
                command.Vulnerabilities.Select(x=>new Vulnerability(x.Description,x.FixRecommendation)).ToList());

            await _context.PentestReports.AddAsync(report);

            await _context.SaveChangesAsync();
        }

        public async Task<FileStream> GetDocx(long id)
        {
            var report = await _context.PentestReports.Include(x => x.Vulnerabilities).SingleOrDefaultAsync(r => r.Id == id);

            string fileName = Path.Combine(Directory.GetCurrentDirectory(), "pentest_report_template.docx");
            var outputPath = Path.Combine(Directory.GetCurrentDirectory(), "pentest_report_"  + DateTime.Now.Ticks + ".docx");

            File.Copy(fileName, outputPath, overwrite: true);

            using (WordprocessingDocument myDocument = WordprocessingDocument.Open(outputPath, true))
            {
                var allMergeFields = myDocument.MainDocumentPart.RootElement.Descendants<FieldCode>().ToList();
                var docData = report.GetKeyValuePairs();
                foreach (var field in allMergeFields)
                {
                    field.ReplaceWithText(docData[field.Text]);
                }
                myDocument.MainDocumentPart.Document.Save();
            }
            var stream = new FileStream(outputPath, FileMode.Open, FileAccess.Read);

            return stream;
        }

        public async Task<List<ReportDTO>> GetReports()
        {
            var result = await _context.PentestReports.Include(x=>x.Vulnerabilities).ToListAsync();

            return result.Select(x => new ReportDTO()
            {
                Id = x.Id,
                ReportVersion = x.ReportVersion,
                SystemName = x.SystemName,
                TestDate = x.TestDate,
                RecommendedChanges = x.RecommendedChanges,
                TechnicalSummary=x.TechnicalSummary,
                Testers=x.Testers,
                TestsConclusions=x.TestsConclusions,
                TestsSpecification=x.TestsSpecification,
                TestsVulnerabilities = x.TestsVulnerabilities,
                Vulnerabilities = x.Vulnerabilities.Select(v=>new VulnerabilityDTO() { 
                Id=v.Id,
                Description=v.Description,
                FixRecommendation=v.FixRecommendation
                }).ToList()
            }).ToList();
        }
    }

    public static class Helpers {
        public static void ReplaceWithText(this FieldCode field, string replacementText)
        {
            if (field == null)
                return;
            Run rFldCode = field.Parent as Run;
            Run rBegin = rFldCode.PreviousSibling<Run>();
            Run rSep = rFldCode.NextSibling<Run>();
            Run rText = rSep.NextSibling<Run>();
            field.Text = replacementText;
            rBegin.Remove();
            rSep.Remove();
        }
    }

}
