using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Domain.Entities
{
    public class PentestReport
    {
        public Dictionary<string,string> GetKeyValuePairs()
        {
            var dict = new Dictionary<string, string>();
            dict.Add(nameof(SystemName), SystemName);
            dict.Add(nameof(TestDate), TestDate.ToString("d"));
            dict.Add(nameof(TestEndDate), TestEndDate.ToString("d"));
            dict.Add(nameof(RetestDate), RetestDate.ToString("d"));
            dict.Add(nameof(RetestEndDate), RetestEndDate.ToString("d"));
            dict.Add(nameof(ReportVersion), ReportVersion);
            dict.Add("Testers", string.Join(",",Auditors.Select(a=>" " + a.Name + " " + a.Surname)));
            dict.Add("TestSpecification", TestsSpecification);
            dict.Add("TestConclusions", TestsConclusions);
            dict.Add(nameof(TestsVulnerabilities), TestsVulnerabilities);
            dict.Add(nameof(TechnicalSummary), TechnicalSummary);
            dict.Add(nameof(RecommendedChanges), RecommendedChanges);
            dict.Add(nameof(Vulnerabilities), GetVulnerabilitiesString());

            return dict;
        }

        private string GetVulnerabilitiesString()
        {
            return string.Join("\n", Vulnerabilities.Select(x => " - " + x.Description + "| Sugerowane działanie: " + x.FixRecommendation));
        }
        public long Id { get; set; }
        public string SystemName { get; set; }
        public string TestLocalization { get; set; }
        public DateTime TestDate { get; set; }
        public DateTime TestEndDate { get; set; }
        public DateTime RetestDate { get; set; }
        public DateTime RetestEndDate { get; set; }
        public string ReportVersion { get; set; }
        public string TestsSpecification { get; set; }
        public string TestsConclusions { get; set; }
        public string TestsVulnerabilities { get; set; }
        public string TechnicalSummary { get; set; }
        public string RecommendedChanges { get; set; }
        public List<Vulnerability> Vulnerabilities { get; set; }
        public List<Auditor> Auditors { get; set; }

        public PentestReport(string systemName, DateTime testDate, DateTime testEndDate, DateTime reTestDate, DateTime reTestEndDate, string testLocalization, string reportVersion, string testsSpecification, string testsConclusions, string testsVulnerabilities, string technicalSummary, string recommendedChanges, List<Vulnerability> vulnerabilities, List<Auditor> auditors)
        {
            SystemName = systemName;
            TestDate = testDate;
            TestEndDate = testEndDate;
            RetestDate = reTestDate;
            RetestEndDate = reTestEndDate;
            TestLocalization = testLocalization;
            ReportVersion = reportVersion;
            TestsSpecification = testsSpecification;
            TestsConclusions = testsConclusions;
            TestsVulnerabilities = testsVulnerabilities;
            TechnicalSummary = technicalSummary;
            RecommendedChanges = recommendedChanges;
            Vulnerabilities = vulnerabilities;
            Auditors = auditors;
        }

        public PentestReport()
        {
        }

        public PentestReport(long id, string systemName, DateTime testDate, DateTime testEndDate, string testLocalization, string reportVersion, string testsSpecification, string testsConclusions, string testsVulnerabilities, string technicalSummary, string recommendedChanges, List<Vulnerability> vulnerabilities, List<Auditor> auditors)
        {
            Id = id;
            SystemName = systemName;
            TestDate = testDate;
            TestEndDate = testEndDate;
            TestLocalization = testLocalization;
            ReportVersion = reportVersion;
            TestsSpecification = testsSpecification;
            TestsConclusions = testsConclusions;
            TestsVulnerabilities = testsVulnerabilities;
            TechnicalSummary = technicalSummary;
            RecommendedChanges = recommendedChanges;
            Vulnerabilities = vulnerabilities;
            Auditors = auditors;
        }
    }
}
